openapi: 3.0.0
info:
  description: CLoudLog api definition
  version: "1.0.2"
  title: CloudLog
  contact:
    email: szymonrykala@gmail.com

paths:
  /logs:
    get:
      tags:
        - logs
      parameters:
        - $ref: "#/components/parameters/fromTime"
        - $ref: "#/components/parameters/toTime"
        - $ref: "#/components/parameters/host"
        - $ref: "#/components/parameters/logType"
        - $ref: "#/components/parameters/loggingEntity"
        - $ref: "#/components/parameters/severity"
      x-amazon-apigateway-request-validator: full-request-validation
      x-amazon-apigateway-integration:
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        passthroughBehavior": when_no_templates
        type: "AWS_PROXY"
        credentials: ${gateway_iam_role}
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${get_logs_arn}/invocations
  
      responses:
        "200":
          description: users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DBLogItem"


    put:
      tags:
        - logs
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LogItem"
      x-amazon-apigateway-request-validator: full-request-validation
      x-amazon-apigateway-integration:
        type: AWS
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:sqs:path/${account_id}/${logs_buffer_queue_name}
        credentials: ${gateway_iam_role}
        contentHandling: CONVERT_TO_TEXT
        passthroughBehavior: "never"
        requestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        requestTemplates:
          application/json: "Action=SendMessage&MessageBody=$input.body"
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: >
                { "message": "message sent" }
        
      responses:
        "200":
          description: logs sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    exmple: "message sent"

x-amazon-apigateway-request-validators:
  "full-request-validation":
    validateRequestParameters: true
    validateRequestBody: true

components:
  parameters:
    fromTime:
      in: query
      name: from
      description: datetime to search from
      required: False
      schema:
        type: string
        example: 2023-09-21T12:00:00

    toTime:
      in: query
      name: to
      description: end datetime to search to
      required: False
      schema:
        type: string
        example: 2023-09-21T12:00:00

    logType:
      in: query
      name: type
      description: type of log
      required: False
      schema:
        type: string
        enum: [user, system, hardware, logger]
        example: user

    loggingEntity:
      in: query
      name: service
      description: service, app that logged
      required: False
      schema:
        type: string
        example: windows-update

    host:
      in: query
      name: hostname
      description: log host machine
      required: False
      schema:
        type: string
        example: lenovo-xyz900

    severity:
      in: query
      name: severity
      description: severity level of the log
      required: False
      schema:
        type: number
        enum: [1, 2, 3, 4, 5, 6]
        example: 1

  schemas:
    DBLogItem:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              example: 35t4d6y4g56
        - $ref: "#/components/schemas/LogItem"

    LogItem:
      type: object
      properties:
        os:
          type: string
          enum: [Windows, Linux]
        timestamp:
          type: number
          example: 1675557738587889
        severity:
          type: number
          enum: [0, 1, 2, 3, 4, 5, 6]
          example: 1
        message:
          type: string
          example: unable to update icon for discord1
        type:
          type: string
          enum: [Application, System, CloudLogger]
          example: Application
        hostname:
          type: string
          example: user-laptop
        raw:
          type: string
          example: log example that I have not
        unit:
          type: string
          example: /snap/postman/184/usr/share/postman

  responses:
    LogsResponse:
      description: successfull response with array of logs
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                log:
                  $ref: "#/components/schemas/LogItem"

    UnauthorizedError:
      description: Access token is missing or invalid
